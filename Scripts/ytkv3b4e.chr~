using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class ControllerPlayer : MonoBehaviour
{
    // Start is called before the first frame update
    public float horizontalInput;
    public float mouseInput;
    public float speed = 5;
    public float rotationSpeed = 30.0f;
    public float xRange;
    public Joystick joystickMove;
    public Joystick joystickFire;

    public GameObject projectilePrefab;
    public GameObject gun;
    //public GameObject muzzle;
    public GameObject chargerSound;
    public GameObject flameThrower;
    public GameObject smoke;
    //public float fireRate=0.25f;
    //private float timer;
    //private float newTime = 0;
    private float offset = 0.015f;
    private GameObject projectile;
    private Vector3 gunPosition;
    private AudioSource audioData;
    private AudioSource audioCharger;
    public AudioClip noHammo;
    public static int meters;
    public static int napalm;
    private Touch touch;
 
    public static List<GameObject> charger = new List<GameObject>();

    public Text metersTravelled;
    public Text munitions;

    //private Rigidbody rb;

    void Start()
    {
        gunPosition = gun.transform.localPosition;
        audioData = gun.GetComponent<AudioSource>();
        audioCharger = chargerSound.GetComponent<AudioSource>();
        napalm = 250;
        //rb = GetComponent<Rigidbody>();
    }

    void Update()
    {
        meters = Mathf.RoundToInt(transform.position.z);

        if (!PauseMenu.GameIsPaused && !DetectCollision.dead)
        {      
            munitions.text = "  Napalm: " + napalm.ToString();
            metersTravelled.text = "  Score: " + meters.ToString();

            if (!PlayerCollisions.powerUp)
            {
                if (speed < 400)
                {
                    speed = 8 + meters / 200;
                }
            }

            transform.Translate(Vector3.forward * Time.deltaTime * speed);

            //CODICE PER LA ROTAZIONE
            mouseInput = Input.GetAxis("Mouse X");
            transform.Rotate(Vector3.up * Time.deltaTime * speed * mouseInput);
            if (transform.rotation.y < -0.1f)
            {
                transform.rotation = new Quaternion(transform.rotation.x, -0.1f, transform.rotation.z, 1);
            }
            if (transform.rotation.y > 0.05f)
            {
                transform.rotation = new Quaternion(transform.rotation.x, 0.05f, transform.rotation.z, 1);
            }
            //FINE CODICE ROTAZIONE

            horizontalInput = Input.GetAxis("Horizontal");
            transform.Translate(Vector3.right * horizontalInput * Time.deltaTime * 1.5f);

            if (Input.GetKeyDown("space") && napalm > 0)
            {
                audioData.Play(0);
            }
            if (Input.GetKeyDown("space") && napalm == 0)
            {
                audioCharger.PlayOneShot(noHammo, 1f);
            }
            if (Input.GetKey("space") && napalm > 0)
            {
                flameThrower.SetActive(true);
                smoke.SetActive(false);
                gun.transform.position = new Vector3(gun.transform.position.x, gun.transform.position.y, Random.Range(gun.transform.position.z - offset, gun.transform.position.z + offset));
                napalm = napalm - 1;
            }
            if (Input.GetKeyUp("space") || napalm == 0)
            {
                flameThrower.SetActive(false);
                smoke.SetActive(true);
                gun.transform.localPosition = gunPosition;
                audioData.Pause();
            }

#if UNITY_ANDROID
                horizontalInput = joystickMove.Horizontal;
                transform.Translate(Vector3.right * horizontalInput * Time.deltaTime * 1.5f);
                {
                    Vector2 pos = touch.position;
                    pos.x = (pos.x - (float)Screen.width / 2.0f) / ((float)Screen.width / 2.0f);
                    transform.Translate(new Vector3(-pos.x, 0, 0)* Time.deltaTime * speed);
                }
#endif
        }
        else
        {
            GetComponent<AudioSource>().Pause();
        }
    }
}
/*

*/
/*
CODICE PER LA MITRAGLIATRICE
munitions.text = " Munitions: " + (1001 - charger.Count).ToString();
Destroy(projectile, 3);
if ( Input.GetKeyDown("space") && charger.Count <= 1000)
{
    audioData.Play(0);
} else if (Input.GetKeyDown("space") && charger.Count >= 1000)
{
    audioCharger.PlayOneShot(noHammo, 1f);
}
if (Input.GetKey("space") && charger.Count <= 1000 )
{
    projectile = Instantiate(projectilePrefab, gun.transform.position, transform.rotation);
    muzzle.SetActive(true);
    gun.transform.position = new Vector3(gun.transform.position.x, gun.transform.position.y, Random.Range(gun.transform.position.z - offset, gun.transform.position.z + offset));
    charger.Add(projectile);
    munitionCount++;
    Debug.Log(munitionCount);
}

if (Input.GetKeyUp("space") || charger.Count > 1000)
{
    muzzle.SetActive(false);
    gun.transform.localPosition = gunPosition;
    audioData.Pause();
}
*/
